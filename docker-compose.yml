version: '3.8'
services:
    postgres:
        image: postgres:13.3
        environment:
            POSTGRES_DB: users
            POSTGRES_PASSWORD: password
            POSTGRES_USER: users
        ports:
            - 5432:5432
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U users || exit 1']
            interval: 10s
            timeout: 5s
            retries: 5
    zookeeper:
        image: bitnami/zookeeper:3.7
        ports:
            - 2181:2181
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
    kafka:
        image: bitnami/kafka:3.0.0
        ports:
            - 9092:9092
            - 9093:9093
        environment:
            - KAFKA_BROKER_ID=1
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
            - ALLOW_PLAINTEXT_LISTENER=yes
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
            - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
            - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
            - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        depends_on:
            - zookeeper
        healthcheck:
            test: ['CMD-SHELL', './opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9093 --list']
            interval: 10s
            timeout: 60s
            retries: 6
    localstack:
        image: localstack/localstack
        ports:
            - 4566:4566
        environment:
            SERVICES: dynamodb,ses
            DEFAULT_REGION: us-east-1
            HOSTNAME_EXTERNAL: localstack
            KINESIS_PROVIDER: kinesalite
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        healthcheck:
            test: ['CMD-SHELL', 'curl -sS 127.0.0.1:4566 || exit 1']
            interval: 10s
            timeout: 5s
            retries: 5
    api-service:
        build: api
        environment:
            KAFKA_BROKER: 'kafka:9092'
            USERS_SERVICE_HOST: 'users-service'
            HS_DEBUG: "true"
            HS_TOKEN: ${HS_TOKEN}
            NODE_ENV: ${ENV:-dev}
            USE_HTTPS: "true"
            CUSTOM_HOSTNAME: demo.gethelios.dev
            COMMIT_HASH: ${COMMIT_HASH}
        depends_on:
            kafka:
                condition: service_healthy
            postgres:
                condition: service_healthy
        ports:
            - 8080:8080
    users-service:
        build: users
        environment:
            PG_HOST: 'postgres'
            HS_DEBUG: "true"
            HS_TOKEN: ${HS_TOKEN}
            NODE_ENV: ${ENV:-dev}
            COMMIT_HASH: ${COMMIT_HASH}
        depends_on:
            postgres:
                condition: service_healthy
        ports:
            - 8081:8081
    accounts-service:
        build: accounts
        environment:
            KAFKA_BROKER: 'kafka:9092'
            FINANCIAL_SERVICE_HOST: 'financial-service'
            HS_DEBUG: 'true'
            HS_TOKEN: ${HS_TOKEN}
            NODE_ENV: ${ENV:-dev}
            COMMIT_HASH: ${COMMIT_HASH}
            HS_COLLECT_ERROR_LOGS: 'true'
        depends_on:
            kafka:
                condition: service_healthy
            localstack:
                condition: service_healthy
    financial-service:
        build: financial
        environment:
            DEPLOYMENT_ENV: ${ENV:-dev}
            AUTOWRAPT_BOOTSTRAP: helios
            HS_TOKEN: ${HS_TOKEN}
            HS_SERVICE_NAME: financial-service
            COMMIT_HASH: ${COMMIT_HASH}
        ports:
            - 8082:8082
    email-service:
        build: emails
        environment:
            KAFKA_BROKER: 'kafka:9092'
            NODE_ENV: ${ENV:-dev}
            HS_TOKEN: ${HS_TOKEN}
            COMMIT_HASH: ${COMMIT_HASH}
        depends_on:
            kafka:
                condition: service_healthy
            localstack:
                condition: service_healthy
